# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

type Customer {
  Email: String
  createdAt: DateTime!
  customerName: String!
  id: String!
  isBlocked: Boolean
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  updatedAt: DateTime!
}

input CustomerCreateInput {
  Email: String
  customerName: String!
  isBlocked: Boolean
  orders: OrderCreateNestedManyWithoutCustomersInput
}

input CustomerCreateNestedManyWithoutOrdersInput {
  connect: [CustomerWhereUniqueInput!]
}

input CustomerListRelationFilter {
  every: CustomerWhereInput
  none: CustomerWhereInput
  some: CustomerWhereInput
}

input CustomerOrderByInput {
  Email: SortOrder
  createdAt: SortOrder
  customerName: SortOrder
  id: SortOrder
  isBlocked: SortOrder
  updatedAt: SortOrder
}

input CustomerUpdateInput {
  Email: String
  customerName: String
  isBlocked: Boolean
  orders: OrderUpdateManyWithoutCustomersInput
}

input CustomerUpdateManyWithoutOrdersInput {
  connect: [CustomerWhereUniqueInput!]
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
}

input CustomerWhereInput {
  Email: StringNullableFilter
  customerName: StringFilter
  id: StringFilter
  isBlocked: BooleanNullableFilter
  orders: OrderListRelationFilter
}

input CustomerWhereUniqueInput {
  id: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createCustomer(data: CustomerCreateInput!): Customer!
  createOrder(data: OrderCreateInput!): Order!
  createStorage(data: StorageCreateInput!): Storage!
  createStore(data: StoreCreateInput!): Store!
  createSupplier(data: SupplierCreateInput!): Supplier!
  createSupplyOrder(data: SupplyOrderCreateInput!): SupplyOrder!
  createUser(data: UserCreateInput!): User!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer!
  deleteOrder(where: OrderWhereUniqueInput!): Order!
  deleteStorage(where: StorageWhereUniqueInput!): Storage!
  deleteStore(where: StoreWhereUniqueInput!): Store!
  deleteSupplier(where: SupplierWhereUniqueInput!): Supplier!
  deleteSupplyOrder(where: SupplyOrderWhereUniqueInput!): SupplyOrder!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  updateStorage(data: StorageUpdateInput!, where: StorageWhereUniqueInput!): Storage!
  updateStore(data: StoreUpdateInput!, where: StoreWhereUniqueInput!): Store!
  updateSupplier(data: SupplierUpdateInput!, where: SupplierWhereUniqueInput!): Supplier!
  updateSupplyOrder(data: SupplyOrderUpdateInput!, where: SupplyOrderWhereUniqueInput!): SupplyOrder!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Order {
  createdAt: DateTime!
  customerId(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
  id: String!
  productSerialNumber(orderBy: [StorageOrderByInput!], skip: Float, take: Float, where: StorageWhereInput): [Storage!]!
  updatedAt: DateTime!
}

input OrderCreateInput {
  customerId: CustomerCreateNestedManyWithoutOrdersInput
  productSerialNumber: StorageCreateNestedManyWithoutOrdersInput
}

input OrderCreateNestedManyWithoutCustomersInput {
  connect: [OrderWhereUniqueInput!]
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

input OrderOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input OrderUpdateInput {
  customerId: CustomerUpdateManyWithoutOrdersInput
  productSerialNumber: StorageUpdateManyWithoutOrdersInput
}

input OrderUpdateManyWithoutCustomersInput {
  connect: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
}

input OrderWhereInput {
  customerId: CustomerListRelationFilter
  id: StringFilter
  productSerialNumber: StorageListRelationFilter
}

input OrderWhereUniqueInput {
  id: String!
}

type Query {
  _customersMeta(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): MetaQueryPayload!
  _ordersMeta(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): MetaQueryPayload!
  _storagesMeta(orderBy: [StorageOrderByInput!], skip: Float, take: Float, where: StorageWhereInput): MetaQueryPayload!
  _storesMeta(orderBy: [StoreOrderByInput!], skip: Float, take: Float, where: StoreWhereInput): MetaQueryPayload!
  _suppliersMeta(orderBy: [SupplierOrderByInput!], skip: Float, take: Float, where: SupplierWhereInput): MetaQueryPayload!
  _supplyOrdersMeta(orderBy: [SupplyOrderOrderByInput!], skip: Float, take: Float, where: SupplyOrderWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  customer(where: CustomerWhereUniqueInput!): Customer
  customers(orderBy: [CustomerOrderByInput!], skip: Float, take: Float, where: CustomerWhereInput): [Customer!]!
  order(where: OrderWhereUniqueInput!): Order
  orders(orderBy: [OrderOrderByInput!], skip: Float, take: Float, where: OrderWhereInput): [Order!]!
  storage(where: StorageWhereUniqueInput!): Storage
  storages(orderBy: [StorageOrderByInput!], skip: Float, take: Float, where: StorageWhereInput): [Storage!]!
  store(where: StoreWhereUniqueInput!): Store
  stores(orderBy: [StoreOrderByInput!], skip: Float, take: Float, where: StoreWhereInput): [Store!]!
  supplier(where: SupplierWhereUniqueInput!): Supplier
  suppliers(orderBy: [SupplierOrderByInput!], skip: Float, take: Float, where: SupplierWhereInput): [Supplier!]!
  supplyOrder(where: SupplyOrderWhereUniqueInput!): SupplyOrder
  supplyOrders(orderBy: [SupplyOrderOrderByInput!], skip: Float, take: Float, where: SupplyOrderWhereInput): [SupplyOrder!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

type Storage {
  createdAt: DateTime!
  id: String!
  order: Order
  productName: String
  productSerialNum: Float
  updatedAt: DateTime!
}

input StorageCreateInput {
  order: OrderWhereUniqueInput
  productName: String
  productSerialNum: Float
}

input StorageCreateNestedManyWithoutOrdersInput {
  connect: [StorageWhereUniqueInput!]
}

input StorageListRelationFilter {
  every: StorageWhereInput
  none: StorageWhereInput
  some: StorageWhereInput
}

input StorageOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  orderId: SortOrder
  productName: SortOrder
  productSerialNum: SortOrder
  updatedAt: SortOrder
}

input StorageUpdateInput {
  order: OrderWhereUniqueInput
  productName: String
  productSerialNum: Float
}

input StorageUpdateManyWithoutOrdersInput {
  connect: [StorageWhereUniqueInput!]
  disconnect: [StorageWhereUniqueInput!]
  set: [StorageWhereUniqueInput!]
}

input StorageWhereInput {
  id: StringFilter
  order: OrderWhereUniqueInput
  productName: StringNullableFilter
  productSerialNum: FloatNullableFilter
}

input StorageWhereUniqueInput {
  id: String!
}

type Store {
  createdAt: DateTime!
  id: String!
  productName: String
  productSerialNumber: Float
  quantity: Float
  updatedAt: DateTime!
}

input StoreCreateInput {
  productName: String
  productSerialNumber: Float
  quantity: Float
}

input StoreOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  productName: SortOrder
  productSerialNumber: SortOrder
  quantity: SortOrder
  updatedAt: SortOrder
}

input StoreUpdateInput {
  productName: String
  productSerialNumber: Float
  quantity: Float
}

input StoreWhereInput {
  id: StringFilter
  productName: StringNullableFilter
  productSerialNumber: FloatNullableFilter
  quantity: IntNullableFilter
}

input StoreWhereUniqueInput {
  id: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Supplier {
  createdAt: DateTime!
  id: String!
  supplierName: String
  supplyOrders(orderBy: [SupplyOrderOrderByInput!], skip: Float, take: Float, where: SupplyOrderWhereInput): [SupplyOrder!]!
  updatedAt: DateTime!
}

input SupplierCreateInput {
  supplierName: String
  supplyOrders: SupplyOrderCreateNestedManyWithoutSuppliersInput
}

input SupplierOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  supplierName: SortOrder
  updatedAt: SortOrder
}

input SupplierUpdateInput {
  supplierName: String
  supplyOrders: SupplyOrderUpdateManyWithoutSuppliersInput
}

input SupplierWhereInput {
  id: StringFilter
  supplierName: StringNullableFilter
  supplyOrders: SupplyOrderListRelationFilter
}

input SupplierWhereUniqueInput {
  id: String!
}

type SupplyOrder {
  createdAt: DateTime!
  id: String!
  productSerialNumber: String
  status: String
  supplierId: Supplier
  updatedAt: DateTime!
}

input SupplyOrderCreateInput {
  productSerialNumber: String
  status: String
  supplierId: SupplierWhereUniqueInput
}

input SupplyOrderCreateNestedManyWithoutSuppliersInput {
  connect: [SupplyOrderWhereUniqueInput!]
}

input SupplyOrderListRelationFilter {
  every: SupplyOrderWhereInput
  none: SupplyOrderWhereInput
  some: SupplyOrderWhereInput
}

input SupplyOrderOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  productSerialNumber: SortOrder
  status: SortOrder
  supplierIdId: SortOrder
  updatedAt: SortOrder
}

input SupplyOrderUpdateInput {
  productSerialNumber: String
  status: String
  supplierId: SupplierWhereUniqueInput
}

input SupplyOrderUpdateManyWithoutSuppliersInput {
  connect: [SupplyOrderWhereUniqueInput!]
  disconnect: [SupplyOrderWhereUniqueInput!]
  set: [SupplyOrderWhereUniqueInput!]
}

input SupplyOrderWhereInput {
  id: StringFilter
  productSerialNumber: StringNullableFilter
  status: StringNullableFilter
  supplierId: SupplierWhereUniqueInput
}

input SupplyOrderWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
