/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSupplyOrderArgs } from "./CreateSupplyOrderArgs";
import { UpdateSupplyOrderArgs } from "./UpdateSupplyOrderArgs";
import { DeleteSupplyOrderArgs } from "./DeleteSupplyOrderArgs";
import { SupplyOrderFindManyArgs } from "./SupplyOrderFindManyArgs";
import { SupplyOrderFindUniqueArgs } from "./SupplyOrderFindUniqueArgs";
import { SupplyOrder } from "./SupplyOrder";
import { Supplier } from "../../supplier/base/Supplier";
import { SupplyOrderService } from "../supplyOrder.service";

@graphql.Resolver(() => SupplyOrder)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SupplyOrderResolverBase {
  constructor(
    protected readonly service: SupplyOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SupplyOrder",
    action: "read",
    possession: "any",
  })
  async _supplyOrdersMeta(
    @graphql.Args() args: SupplyOrderFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SupplyOrder])
  @nestAccessControl.UseRoles({
    resource: "SupplyOrder",
    action: "read",
    possession: "any",
  })
  async supplyOrders(
    @graphql.Args() args: SupplyOrderFindManyArgs
  ): Promise<SupplyOrder[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SupplyOrder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SupplyOrder",
    action: "read",
    possession: "own",
  })
  async supplyOrder(
    @graphql.Args() args: SupplyOrderFindUniqueArgs
  ): Promise<SupplyOrder | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SupplyOrder)
  @nestAccessControl.UseRoles({
    resource: "SupplyOrder",
    action: "create",
    possession: "any",
  })
  async createSupplyOrder(
    @graphql.Args() args: CreateSupplyOrderArgs
  ): Promise<SupplyOrder> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        supplierId: args.data.supplierId
          ? {
              connect: args.data.supplierId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SupplyOrder)
  @nestAccessControl.UseRoles({
    resource: "SupplyOrder",
    action: "update",
    possession: "any",
  })
  async updateSupplyOrder(
    @graphql.Args() args: UpdateSupplyOrderArgs
  ): Promise<SupplyOrder | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          supplierId: args.data.supplierId
            ? {
                connect: args.data.supplierId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SupplyOrder)
  @nestAccessControl.UseRoles({
    resource: "SupplyOrder",
    action: "delete",
    possession: "any",
  })
  async deleteSupplyOrder(
    @graphql.Args() args: DeleteSupplyOrderArgs
  ): Promise<SupplyOrder | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Supplier, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Supplier",
    action: "read",
    possession: "any",
  })
  async supplierId(
    @graphql.Parent() parent: SupplyOrder
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplierId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
